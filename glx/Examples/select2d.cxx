#include <GLX.h>
#include <glxTrackpad.h>
#include <Draggers/Plotter.h>
#include <sstream>
#include <GL/glu.h>
#include <Draggers/SelectablePlot2D.h>

#include "debug.h"

using namespace std;

#define RANDDATA 1

#ifdef RANDDATA
int N=0;
float *xdata=0,*ydata=0;
#else
int N=228;
float xdata[N]={
  -0.003850, 0.016980, 0.044500, 0.122460, 0.207100, 0.277870, 
  0.144590,-0.313430,-0.420230,-0.333480,-0.224210, 0.031870,
  0.315290, 0.560130, 0.681000, 0.602330, 0.402730, 0.165230,
  -0.009130, 0.001310,-0.005940, 0.008820, 0.081450, 0.217200,
  0.334210, 0.134810,-0.320510,-0.535670,-0.377740,-0.190100,
  0.065460, 0.314450, 0.570030, 0.686770, 0.617910, 0.405950,
  0.189590, 0.001180, 0.000750,-0.028280,-0.029130, 0.027260,
  0.160470, 0.219520, 0.072240,-0.282600,-0.494730,-0.324590,
  -0.134460, 0.095480, 0.326610, 0.562670, 0.694560, 0.645190,
  0.443170, 0.207780,-0.002120,-0.000320,-0.045810,-0.060620,
  -0.012630, 0.084900, 0.151530,-0.002320,-0.251570,-0.428310,
  -0.267840,-0.105460, 0.111860, 0.352120, 0.566290, 0.703780,
  0.663050, 0.466920, 0.222450, 0.000150, 0.003600,-0.063530,
  -0.081510,-0.047300, 0.033130, 0.040500,-0.027340,-0.278320,
  -0.394730,-0.232020,-0.074040, 0.128550, 0.350900, 0.557470,
  0.703170, 0.679670, 0.490340, 0.247130,-0.000150, 0.004520,
  -0.069660,-0.091490,-0.054110, 0.018730, 0.017750,-0.043650,
  -0.268250,-0.373510,-0.220170,-0.066970, 0.128520, 0.343190,
  0.548510, 0.696970, 0.671750, 0.492350, 0.247180, 0.001140,
  -0.000070,-0.075330,-0.096990,-0.057310, 0.006120,-0.006080,
  -0.065210,-0.254940,-0.348310,-0.205400,-0.056750, 0.129840,
  0.336490, 0.537360, 0.677680, 0.671090, 0.493410, 0.238760,
  0.002070, 0.000120,-0.080660,-0.105630,-0.076120,-0.019690,
  -0.022220,-0.109680,-0.359900,-0.318150,-0.184980,-0.045570,
  0.130120, 0.327080, 0.524510, 0.649200, 0.651050, 0.502460,
  0.247230, 0.002100,-0.000070,-0.034440,-0.039120,-0.028500,
  -0.038950,-0.108350,-0.224520,-0.273820,-0.267060,-0.179940,
  -0.049110, 0.115750, 0.310460, 0.487370, 0.581830, 0.578300,
  0.470160, 0.270170, 0.003520,-0.000020, 0.101750, 0.151230,
  0.115710, 0.035290,-0.066220,-0.165520,-0.236880,-0.266510,
  -0.231910,-0.112670, 0.080620, 0.286080, 0.441360, 0.516640,
  0.503080, 0.404010, 0.228800, 0.000000,-0.000090, 0.124530,
  0.192180, 0.156790, 0.063310,-0.046610,-0.149240,-0.227360,
  -0.265990,-0.243440,-0.131470, 0.066070, 0.273720, 0.427600,
  0.498330, 0.485560, 0.390480, 0.217800,-0.000010, 0.000110,
  0.137570, 0.216160, 0.182860, 0.079930,-0.034650,-0.138600,
  -0.222360,-0.265050,-0.249520,-0.141790, 0.052740, 0.263480,
  0.418000, 0.486440, 0.474760, 0.380890, 0.213800,-0.000010};
float ydata[N]={
  0.813760, 0.775870, 0.730840, 0.642400, 0.591390, 0.579230,
  0.532400, 0.462250, 0.409360, 0.371870, 0.354420, 0.349440,
  0.427960, 0.560470, 0.723680, 0.876640, 0.999060, 1.062520,
  1.056140, 0.913080, 0.857900, 0.825730, 0.733200, 0.686430,
  0.705950, 0.722790, 0.618790, 0.603460, 0.547990, 0.484600,
  0.520720, 0.569560, 0.678610, 0.812350, 0.970320, 1.085420,
  1.144140, 1.172980, 0.990320, 0.945370, 0.904420, 0.815230,
  0.757740, 0.796170, 0.842760, 0.753770, 0.707890, 0.590830,
  0.567760, 0.606430, 0.673970, 0.768870, 0.890770, 1.048680,
  1.158300, 1.205670, 1.252520, 1.031660, 1.034310, 0.976710,
  0.873630, 0.839460, 0.853940, 0.918990, 0.842420, 0.766440,
  0.650550, 0.610520, 0.657650, 0.785320, 0.863750, 0.972660,
  1.116260, 1.223340, 1.273550, 1.312420, 1.116330, 1.073850,
  1.002230, 0.921350, 0.885850, 0.923820, 0.948880, 0.895590,
  0.772720, 0.673980, 0.650690, 0.707090, 0.815150, 0.940930,
  1.040280, 1.186730, 1.280780, 1.330680, 1.357180, 1.111170,
  1.075190, 1.002120, 0.923900, 0.889580, 0.926970, 0.945570,
  0.896040, 0.773860, 0.672460, 0.649910, 0.702280, 0.804040,
  0.940980, 1.048250, 1.191710, 1.286080, 1.325480, 1.351990,
  1.118020, 1.086500, 1.004730, 0.921950, 0.888190, 0.924620,
  0.940330, 0.899160, 0.773990, 0.673510, 0.657710, 0.703480,
  0.796560, 0.936690, 1.064030, 1.197480, 1.291140, 1.325860,
  1.346430, 1.209060, 1.121810, 1.035140, 0.956910, 0.914610,
  0.929490, 0.948130, 0.935830, 0.772630, 0.678120, 0.664760,
  0.704360, 0.789170, 0.935950, 1.090160, 1.238750, 1.337360,
  1.351300, 1.364600, 1.179160, 1.130360, 1.054830, 0.998620,
  0.972270, 0.977080, 0.973180, 0.885370, 0.765800, 0.666730,
  0.640010, 0.652440, 0.721240, 0.874700, 1.064270, 1.256860,
  1.415350, 1.485230, 1.444940, 0.761700, 0.786400, 0.849390,
  0.888540, 0.909800, 0.905480, 0.862820, 0.788350, 0.688360,
  0.578910, 0.498410, 0.482330, 0.552340, 0.704010, 0.908440,
  1.124790, 1.315200, 1.437310, 1.488940, 0.664500, 0.692350,
  0.770550, 0.844100, 0.875020, 0.870960, 0.831970, 0.758040,
  0.657940, 0.542440, 0.447520, 0.422620, 0.493610, 0.650410,
  0.859870, 1.083650, 1.279840, 1.411200, 1.456470, 0.611190,
  0.635090, 0.716020, 0.809970, 0.848830, 0.848730, 0.811770,
  0.740440, 0.636590, 0.515940, 0.413020, 0.383360, 0.453600,
  0.615380, 0.830500, 1.056910, 1.256310, 1.393420, 1.430550};
#endif

vector<double> xvec,yvec;
vector<float> xhits,yhits;

double dmin[2]={MAXFLOAT,MAXFLOAT};
double dmax[2]={-MAXFLOAT,-MAXFLOAT};

void
pixelToWorldCoords(glx* env, int x, int y, float* xf, float* yf)
{
  ostringstream ostr;
  int winh = env->winHeight();
  double px,py,pz;
  int viewport[4];
  double modelMatrix[16],projMatrix[16],inv[16];
  glGetDoublev(GL_MODELVIEW_MATRIX,(double *)modelMatrix);
  glGetDoublev(GL_PROJECTION_MATRIX,(double *)projMatrix);
  glGetIntegerv(GL_VIEWPORT, viewport);
  env->unproject(x,winh-y,0,modelMatrix,projMatrix,viewport,&px,&py,&pz);
  *xf = px;
  *yf = py;
}

void draw(glx* env, void* user)
{  
}

void initGL(glx* env, void* user)
{
  int* mousePos = static_cast<int*>(user);

#ifdef RANDDATA
  N = 1000;
  xdata=new float[N];
  ydata=new float[N];

  srand48( (unsigned) time(NULL) );

  for(int i=0;i<N;++i){
    xdata[i]=drand48();
    ydata[i]=drand48();
  }
#endif

  for( int i=0 ; i<N ; i++ ){
    if( dmin[0] > xdata[i] ) dmin[0] = xdata[i];
    if( dmax[0] < xdata[i] ) dmax[0] = xdata[i];
    if( dmin[1] > ydata[i] ) dmin[1] = ydata[i];
    if( dmax[1] < ydata[i] ) dmax[1] = ydata[i];
  }
  _VAR2V(dmin);
  _VAR2V(dmax);

  Glx::Trackpad* tp = new Glx::Trackpad(env);
  xvec.assign(&xdata[0],&xdata[N]);
  yvec.assign(&ydata[0],&ydata[N]);

  Glx::SelectablePlot2D* plotter = 
    new Glx::SelectablePlot2D(env,&xvec,&yvec);

  env->addDrawFunc(draw,plotter);
}

int
main(int,char**)
{
  int mousePos[2];

  glx* env = new glx(initGL,mousePos);
  env->mainLoop();
  return 0;
}
